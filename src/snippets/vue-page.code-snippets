{
  "Vue Element-Plus CRUD": {
    "prefix": "vpagecrud",
    "body": [
      "<template> ",
      "\t <el-button type=\"primary\" @click=\"openAddDialog\">添加</el-button> ",
      "",
      "\t <!-- 用户列表 --> ",
      "\t <el-table v-loading=\"loading\" :data=\"tableData\" style=\"width: 100%\" border stripe> ",
      "\t\t <el-table-column prop=\"id\" label=\"ID\" width=\"80\" /> ",
      "\t\t <el-table-column prop=\"username\" label=\"用户名\" /> ",
      "\t\t <el-table-column prop=\"email\" label=\"邮箱\" /> ",
      "\t\t <el-table-column label=\"操作\" width=\"140px\" align=\"center\" fixed=\"right\"> ",
      "\t\t\t <template #default=\"{ row }\"> ",
      "\t\t\t\t <el-button size=\"small\" type=\"primary\" @click=\"openEditDialog(row)\"> ",
      "\t\t\t\t\t 编辑 ",
      "\t\t\t\t </el-button> ",
      "\t\t\t\t <el-button size=\"small\" type=\"danger\" @click=\"handleDelete(row)\">删除</el-button> ",
      "\t\t\t </template> ",
      "\t\t </el-table-column> ",
      "\t </el-table> ",
      "",
      "\t <el-dialog v-model=\"dialogParam.visible\" :title=\"dialogParam.title\" width=\"650px\"> ",
      "\t\t <el-form ref=\"formRef\" :model=\"form\" :rules=\"rules\" label-width=\"80px\"> ",
      "\t\t\t <el-form-item label=\"用户名\" prop=\"username\"> ",
      "\t\t\t\t <el-input v-model=\"form.username\" placeholder=\"请输入用户名\" /> ",
      "\t\t\t </el-form-item> ",
      "\t\t\t <el-form-item label=\"邮箱\" prop=\"email\"> ",
      "\t\t\t\t <el-input v-model=\"form.email\" placeholder=\"请输入邮箱\" /> ",
      "\t\t\t </el-form-item> ",
      "\t\t </el-form> ",
      "\t\t <template #footer> ",
      "\t\t\t <div style=\"display: flex; justify-content: flex-end\"> ",
      "\t\t\t\t <el-button @click=\"handleCancel\">取消</el-button> ",
      "\t\t\t\t <el-button type=\"primary\" @click=\"submitForm\"> ",
      "\t\t\t\t\t {{ dialogParam.type === 'edit' ? '更新' : '添加' }} ",
      "\t\t\t\t </el-button> ",
      "\t\t\t </div> ",
      "\t\t </template> ",
      "\t </el-dialog> ",
      "</template> ",
      "",
      "<script setup> ",
      "import { reactive, ref, onMounted } from 'vue' ",
      "import { ElMessage, ElMessageBox } from 'element-plus' ",
      "",
      "const tableData = ref([]) ",
      "const loading = ref(false) ",
      "const dialogParam = ref({ ",
      "\t visible: false, ",
      "\t type: 'add', ",
      "\t title: '添加用户' ",
      "}) ",
      "const currentData = ref({}) ",
      "const formRef = ref(null) ",
      "const form = reactive({ ",
      "\t username: '', ",
      "\t email: '' ",
      "}) ",
      "",
      "// 表单校验规则 ",
      "const rules = reactive({ ",
      "\t username: [ ",
      "\t\t { required: true, message: '请输入用户名', trigger: 'blur' }, ",
      "\t\t { min: 2, max: 20, message: '用户名长度应为2-20个字符', trigger: 'blur' } ",
      "\t ], ",
      "\t email: [ ",
      "\t\t { required: true, message: '请输入邮箱地址', trigger: 'blur' }, ",
      "\t\t { type: 'email', message: '请输入正确的邮箱地址', trigger: 'blur' } ",
      "\t ] ",
      "}) ",
      "",
      "onMounted(() => { ",
      "\t getDataList() ",
      "}) ",
      "",
      "const getDataList = async () => { ",
      "\t loading.value = true ",
      "\t setTimeout(() => { ",
      "\t\t tableData.value = [ ",
      "\t\t\t { id: 1, username: '张三', email: 'zhangsan@example.com' }, ",
      "\t\t\t { id: 2, username: '李四', email: 'lisi@example.com' }, ",
      "\t\t\t { id: 3, username: '王五', email: 'wangwu@example.com' } ",
      "\t\t ] ",
      "\t\t loading.value = false ",
      "\t }, 500) ",
      "} ",
      "const openAddDialog = () => { ",
      "\t dialogParam.value = { visible: true, type: 'add', title: '添加' } ",
      "\t resetForm() ",
      "} ",
      "const openEditDialog = (user) => { ",
      "\t dialogParam.value = { visible: true, type: 'edit', title: '编辑' } ",
      "\t resetForm() ",
      "\t currentData.value = { ...user } ",
      "\t form.username = user.username ",
      "\t form.email = user.email ",
      "} ",
      "",
      "// 处理删除用户 ",
      "const handleDelete = (row) => { ",
      "\t ElMessageBox.confirm('确定要删除吗？', '提示', { ",
      "\t\t confirmButtonText: '确定', ",
      "\t\t cancelButtonText: '取消', ",
      "\t\t type: 'warning' ",
      "\t }) ",
      "\t\t .then(() => { ",
      "\t\t\t console.log('handlerDelete') ",
      "\t\t }) ",
      "\t\t .catch(() => { ",
      "\t\t\t console.log('cancel') ",
      "\t\t }) ",
      "} ",
      "const handleCancel = async () => {",
      "\t resetForm()",
      "\t dialogParam.value.visible = false ",
      "}",
      "// 提交表单 ",
      "const submitForm = async () => { ",
      "\t formRef.value?.validate(async (valid) => { ",
      "\t\t if (valid) { ",
      "\t\t\t if (dialogParam.value.type === 'edit') { ",
      "\t\t\t\t console.log('edit') ",
      "\t\t\t } else { ",
      "\t\t\t\t console.log('add') ",
      "\t\t\t } ",
      "\t\t\t dialogParam.value.visible = false ",
      "\t\t } ",
      "\t }) ",
      "} ",
      "// 重置表单 ",
      "const resetForm = () => { ",
      "\t form.username = '' ",
      "\t form.email = '' ",
      "\t currentData.value = {} ",
      "\t formRef.value?.resetFields() ",
      "} ",
      "</script> ",
      "",
      "<style lang=\"scss\" scoped></style>"
    ],
    "description": "Vue Element-Plus CRUD示例"
  },
  "Vue Element-Plus Upload": {
    "prefix": "vpageupload",
    "body": [
      "<template>",
      "  <el-upload",
      "    :class=\"{ 'my-upload': fileList.length >= limit }\"",
      "    ref=\"uploadRef\"",
      "    multiple",
      "    :limit=\"limit\"",
      "    :auto-upload=\"false\"",
      "    :show-file-list=\"true\"",
      "    :accept=\"accept.join()\"",
      "    list-type=\"picture-card\"",
      "    :http-request=\"httpRequest\"",
      "    :on-remove=\"onRemove\"",
      "    :on-error=\"onError\"",
      "    :on-success=\"onSuccess\"",
      "    :on-change=\"onChange\"",
      "    :on-preview=\"onPreview\"",
      "    :on-exceed=\"onExceed\"",
      "    :before-upload=\"beforeUpload\"",
      "    :before-remove=\"beforeRemove\"",
      "    v-model:file-list=\"fileList\"",
      "  >",
      "    <template #trigger>",
      "      <el-icon>",
      "        <Plus />",
      "      </el-icon>",
      "    </template>",
      "  </el-upload>",
      "",
      "  <el-space style=\"margin-top: 10px\">",
      "    <el-button type=\"primary\" @click.stop=\"handleUpload\">手动上传</el-button>",
      "    <el-button type=\"warning\" @click.stop=\"getFileList\">获取FileList</el-button>",
      "    <el-button type=\"danger\" @click.stop=\"handleReset\">重置</el-button>",
      "  </el-space>",
      "",
      "  <el-image-viewer",
      "    v-if=\"showPreview\"",
      "    show-progress",
      "    :url-list=\"previewList\"",
      "    :initial-index=\"initialIndex\"",
      "    @close=\"closePreview\"",
      "  />",
      "</template>",
      "",
      "<script lang=\"ts\" setup>",
      "import { computed, ref } from 'vue'",
      "import {",
      "  UploadProps,",
      "  UploadInstance,",
      "  UploadRequestOptions,",
      "  ElImageViewer,",
      "  ElMessage,",
      "  ElMessageBox",
      "} from 'element-plus'",
      "import axios from 'axios'",
      "import { Plus } from '@element-plus/icons-vue'",
      "",
      "const accept = ref(['image/png', 'image/jpg', 'image/jpeg'])",
      "const limit = ref(3)",
      "const uploadRef = ref<UploadInstance>()",
      "const fileList = ref([])",
      "const httpRequest = (options: UploadRequestOptions) => {",
      "  return new Promise(async (resolve, reject) => {",
      "    const { file, onSuccess, onError, onProgress } = options",
      "    const formData = new FormData()",
      "    formData.append('file', file)",
      "",
      "    let response = await axios.post('http://localhost:8080/upload-image', formData, {",
      "      headers: {",
      "        'Content-Type': 'multipart/form-data'",
      "      }",
      "    })",
      "    // 上传成功会把当前文件的status修改为success",
      "    if (response.data.code === 200) {",
      "      // resolve 和 onSuccess 功能相同",
      "      onSuccess(response.data.data)",
      "      // resolve(response.data.data)",
      "      return",
      "    }",
      "    // 上传失败会自动从fileList剔除",
      "    // reject 和 onError 功能相同",
      "    onError(response.data.data)",
      "    // reject(response.data.data)",
      "  })",
      "}",
      "",
      "/**",
      " * @param response 自定义httpRequest中调用 onSuccess/onError传递的结果",
      " * @param uploadFile 当前上传的文件",
      " * @param uploadFiles 上传的文件列表，如果调用了onError，会从uploadFiles剔除",
      " * onSuccess 上传成功要把 url 替换为线上地址",
      " */",
      "const onSuccess: UploadProps['onSuccess'] = (response, uploadFile, uploadFiles) => {",
      "  console.log('onSuccess 传递的结果:', response)",
      "  console.log('onSuccess 当前上传的文件:', uploadFile)",
      "  console.log('onSuccess 上传的文件列表:', uploadFiles)",
      "  uploadFile.url = response",
      "}",
      "const onError: UploadProps['onError'] = (response, uploadFile, uploadFiles) => {",
      "  console.log('onError 传递的结果:', response)",
      "  console.log('onError 当前上传的文件:', uploadFile)",
      "  console.log('onError 上传的文件列表:', uploadFiles)",
      "}",
      "const onRemove: UploadProps['onRemove'] = (uploadFile, uploadFiles) => {",
      "  console.log('onRemove 当前上传的文件:', uploadFile)",
      "  console.log('onRemove 上传的文件列表:', uploadFiles)",
      "}",
      "const onChange: UploadProps['onChange'] = (uploadFile, uploadFiles) => {",
      "  console.log('onChange 当前上传的文件:', uploadFile)",
      "  console.log('onChange 上传的文件列表:', uploadFiles)",
      "}",
      "const onPreview: UploadProps['onPreview'] = (file) => {",
      "  console.log(file)",
      "  // 注意找不到会返回 -1",
      "  const index = fileList.value.findIndex((i) => i.uid === file.uid)",
      "  if (index >= 0) {",
      "    initialIndex.value = index",
      "    showPreview.value = true",
      "  }",
      "}",
      "// 应该是只有多选的时候才会触发",
      "const onExceed: UploadProps['onExceed'] = (files: File[], uploadFiles) => {",
      "  if (files.length > limit.value) {",
      "    ElMessage.error(`最多只能上传 ${limit.value} 个文件！`)",
      "  }",
      "}",
      "const fileCanUpload = (rawFile: any, showMessage?: boolean) => {",
      "  console.log(rawFile.type)",
      "  if (!accept.value.includes(rawFile.type)) {",
      "    showMessage && ElMessage.error('文件格式不正确!')",
      "    return false",
      "  } else if (rawFile.size / 1024 / 1024 > 2) {",
      "    showMessage && ElMessage.error('文件最大 2MB!')",
      "    return false",
      "  }",
      "  return true",
      "}",
      "const beforeUpload: UploadProps['beforeUpload'] = (rawFile) => {",
      "  return fileCanUpload(rawFile, true)",
      "}",
      "// 自动删除也会触发这个",
      "const beforeRemove: UploadProps['beforeRemove'] = (uploadFile, uploadFiles) => {",
      "  if (!fileCanUpload(uploadFile.raw)) {",
      "    return true",
      "  }",
      "",
      "  return ElMessageBox({",
      "    title: '操作提示',",
      "    type: 'warning',",
      "    message: `确定删除文件【${uploadFile.name}】?`",
      "  }).then(",
      "    () => true,",
      "    () => false",
      "  )",
      "}",
      "/**",
      " * 手动触发上传",
      " */",
      "const handleUpload = () => {",
      "  uploadRef.value?.submit()",
      "}",
      "",
      "const getFileList = () => {",
      "  console.log(fileList.value)",
      "}",
      "",
      "const handleReset = () => {",
      "  console.log(uploadRef.value)",
      "  uploadRef.value.clearFiles()",
      "}",
      "",
      "/**",
      " * 预览功能",
      " */",
      "const showPreview = ref(false)",
      "const initialIndex = ref(0)",
      "const previewList = computed(() => fileList.value.map((item) => item.url))",
      "const closePreview = () => {",
      "  showPreview.value = false",
      "}",
      "</script>",
      "",
      "<style scoped lang=\"scss\">",
      ".my-upload {",
      "  height: 148px;",
      "  :deep(.el-upload) {",
      "    position: absolute;",
      "    visibility: hidden;",
      "    z-index: -999;",
      "  }",
      "}",
      "</style>",
      "",
      ""
    ],
    "description": "Vue Element-Plus 上传详细解析"
  },
  "Vue Element-Plus UploadComponent": {
    "prefix": "vpageupload",
    "body": [
      "<template>",
      "  <el-upload",
      "    ref=\"uploadRef\"",
      "    :show-file-list=\"true\"",
      "    :limit=\"limit\"",
      "    list-type=\"picture-card\"",
      "    :auto-upload=\"true\"",
      "    v-model:file-list=\"fileList\"",
      "    :http-request=\"httpRequest\"",
      "    :class=\"{ 'my-upload': fileList.length >= limit }\"",
      "    :on-remove=\"onRemove\"",
      "    :on-success=\"onSuccess\"",
      "    :on-preview=\"onPreview\"",
      "  >",
      "    <template #trigger>",
      "      <el-icon>",
      "        <Plus />",
      "      </el-icon>",
      "    </template>",
      "  </el-upload>",
      "",
      "  <el-image-viewer",
      "    v-if=\"showPreview\"",
      "    show-progress",
      "    :url-list=\"previewList\"",
      "    :initial-index=\"initialIndex\"",
      "    @close=\"closePreview\"",
      "  />",
      "</template>",
      "",
      "<script setup lang=\"ts\">",
      "import { Plus } from '@element-plus/icons-vue'",
      "import axios from 'axios'",
      "import { computed, ref } from 'vue'",
      "import type { UploadInstance, UploadRequestOptions } from 'element-plus'",
      "",
      "const limit = 1",
      "const fileList = ref([])",
      "const uploadRef = ref<UploadInstance>()",
      "const emit = defineEmits(['success', 'remove', 'fail'])",
      "",
      "const httpRequest = (options: UploadRequestOptions) => {",
      "  return new Promise(async (resolve, reject) => {",
      "    const { file, onSuccess, onError, onProgress } = options",
      "    const formData = new FormData()",
      "    formData.append('file', file)",
      "",
      "    let response = await axios.post('http://localhost:8080/upload-image', formData, {",
      "      headers: {",
      "        'Content-Type': 'multipart/form-data'",
      "      }",
      "    })",
      "    // 上传成功会把当前文件的status修改为success",
      "    if (response.data.code === 200) {",
      "      // resolve 和 onSuccess 功能相同",
      "      onSuccess(response.data.data)",
      "      // resolve(response.data.data)",
      "      return",
      "    }",
      "    // 上传失败会自动从fileList剔除",
      "    // reject 和 onError 功能相同",
      "    onError(response.data.data)",
      "    // reject(response.data.data)",
      "  })",
      "}",
      "const onSuccess = (url: string, uploadFile: any) => {",
      "  uploadFile.url = url",
      "  emit('success', url)",
      "}",
      "const onRemove = () => {",
      "  emit('remove')",
      "}",
      "const onPreview = (file: any) => {",
      "  // 注意找不到会返回 -1",
      "  const index = fileList.value.findIndex((i) => i.uid === file.uid)",
      "  if (index >= 0) {",
      "    initialIndex.value = index",
      "    showPreview.value = true",
      "  }",
      "}",
      "const reset = () => {",
      "  uploadRef.value.clearFiles()",
      "}",
      "defineExpose({ reset })",
      "",
      "/**",
      " * 预览功能",
      " */",
      "const showPreview = ref(false)",
      "const initialIndex = ref(0)",
      "const previewList = computed(() => fileList.value.map((item) => item.url))",
      "const closePreview = () => {",
      "  showPreview.value = false",
      "}",
      "</script>",
      "",
      "<style scoped lang=\"scss\">",
      ".my-upload {",
      "  height: 148px;",
      "",
      "  :deep(.el-upload) {",
      "    position: absolute;",
      "    visibility: hidden;",
      "    z-index: -999;",
      "  }",
      "",
      "  :deep(.el-upload-list__item) {",
      "    margin-bottom: 0;",
      "  }",
      "}",
      "</style>",
      "",
      "// 使用示例",
      "<el-form-item label=\"头像\" prop=\"avatar\">",
      "    <MyUpload ref=\"formUploadRef\" @success=\"success\" @remove=\"remove\" />",
      "</el-form-item>",
      "",
      "const formUploadRef = ref()",
      "const success = (url: string) => {",
      "  form.value.avatar = url",
      "  formRef.value.validateField('avatar')",
      "}",
      "const remove = () => {",
      "  form.value.avatar = ''",
      "}",
      "const handleReset = () => {",
      "  formUploadRef?.value.reset()",
      "}",
      ""
    ],
    "description": "Vue Element-Plus 上传封装使用示例"
  }
}
